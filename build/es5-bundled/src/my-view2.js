define(["./my-app.js"],function(_myApp){"use strict";function _templateObject_b645eb00804e11e8814dc536b46d9113(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style include=\"shared-styles iron-flex iron-flex-alignment\">\n        :host {\n          display: block;\n\n          padding: 10px;\n        }\n        plastic-resize-aware {\n      min-width: 20%;\n    }\n    .codetext {\n          font-family: 'Courier New', Courier, monospace;\n          color: black;\n          font-weight: bold;\n          background-color: #f9f8f7;\n        }\n      </style>\n      <h2>plastic-resize-aware</h2>\n      <p><span class=\"codetext\">plastic-resize-aware</span> is a container element that fires an event when its size changes.\n      Sometimes you may need to take some action when the rendered size of an element changes. This element provides the \nsomething like the window resize event but for an individual element.</p>\n<p>There are many reasons an element's size could change - CSS or class changes, content changes, content of other elements affecting\nthe flow, viewport changes, etc.</p>\n<p><span class=\"codetext\">plastic-element-query</span> is a non visual element that allows you to use CSS media query style\nexpressions as <i>element queries</i> to apply and remove CSS classes on a target element.</p>\n<p>A prior version of the element is available for Polymer 2 - <span class=\"codetext\">resize-aware</span> which does not \ninclude the element queries function.</p>\n<h3>Demo</h3>\n<paper-button raised on-tap=\"_reset\" disabled$=\"[[_isRunning]]\">Start / Restart Demo</paper-button>\n<br>\n      <div style=\"display: -webkit-flex; display: flex; max-width: 500px; width: 100%; min-height: 80px;\">\n          <div>\n            <plastic-resize-aware id=\"ra1\" on-element-resize=\"logResize\">\n              <div id=\"tester\" style=\"background-color: azure; margin: 5px; padding: 5px;\">\n                <p>\n                  This azure area is resize-aware.\n                </p>\n              </div>\n            </plastic-resize-aware>\n          </div>\n          <div id=\"col2info\" style=\" margin: 5px; padding: 5px;\"></div>\n        </div>\n        <ul id=\"chglist\">\n        </ul>\n      \n    <div id=\"sources\"></div>\n    "]);_templateObject_b645eb00804e11e8814dc536b46d9113=function(){return data};return data}var MyView2=function(_GestureEventListener){babelHelpers.inherits(MyView2,_GestureEventListener);function MyView2(){babelHelpers.classCallCheck(this,MyView2);return babelHelpers.possibleConstructorReturn(this,(MyView2.__proto__||Object.getPrototypeOf(MyView2)).apply(this,arguments))}babelHelpers.createClass(MyView2,[{key:"connectedCallback",value:function connectedCallback(){var _this=this;babelHelpers.get(MyView2.prototype.__proto__||Object.getPrototypeOf(MyView2.prototype),"connectedCallback",this).call(this);setTimeout(function(){_this._showSource()},1e3)}},{key:"logResize",value:function logResize(e){var li=document.createElement("li");li.innerHTML="Changed to "+e.detail.width+" x "+e.detail.height;this.$.chglist.appendChild(li)}},{key:"trigChanged",value:function trigChanged(o,n){if(!this._isRunning&&n){this.doChanges()}}},{key:"_reset",value:function _reset(){if(!this._isRunning){this.doChanges()}}},{key:"doChanges",value:function doChanges(){var _this2=this;this._isRunning=!0;var t=this.$.tester,c2=this.$.col2info;t.innerHTML="<p>This azure area is <span class=\"codetext\">plastic-resize-aware</span>.</p>";c2.innerHTML="";this.$.chglist.innerHTML="";setTimeout(function(){t.innerHTML="<p>This azure area is <span class=\"codetext\">plastic-resize-aware</span>.</p><p>It fires an event when its size changes. For example, if the content size changes.</p>"},5e3);setTimeout(function(){c2.innerHTML="<p>... Or if other elements in the layout change the available space.</p>"},1e4);setTimeout(function(){t.innerHTML+="<p>Or, of course, if the viewport changes. (try resizing the window).</p>"},15e3);setTimeout(function(){t.innerHTML+="<p>The element uses a ResizeObserver, which is polyfilled if necessary.</p>"},19e3);setTimeout(function(){c2.innerHTML="";_this2._isRunning=!1},22e3)}},{key:"_showSource",value:function _showSource(){var mapMarkup=hljs.highlight("xml","\n    <paper-button raised on-tap=\"_reset\" disabled$=\"[[_isRunning]]\">Start / Restart Demo</paper-button>\n<br>\n      <div style=\"display: -webkit-flex; display: flex; max-width: 500px; width: 100%; min-height: 80px;\">\n          <div>\n            <plastic-resize-aware id=\"ra1\" on-element-resize=\"logResize\">\n              <div id=\"tester\" style=\"background-color: azure; margin: 5px; padding: 5px;\">\n                <p>\n                  This azure area is <span class=\"codetext\">plastic-resize-aware</span>.\n                </p>\n              </div>\n            </plastic-resize-aware>\n          </div>\n          <div id=\"col2info\" style=\" margin: 5px; padding: 5px;\"></div>\n        </div>\n        <ul id=\"chglist\">\n        </ul>\n    ");this.$.sources.innerHTML="\n    <p>In this example we receive resize notifications from <span class=\"codetext\">plastic-resize-aware</span> and\n    simply add them to a list.</p>\n    <h3>Markup</h3>\n    <pre><code class=\"html\">".concat(mapMarkup.value,"</code></pre>");var jsCode=hljs.highlight("javascript","\n  /**\n   * Handle on-element-resize event\n   */\n  logResize(e) {\n    let li = document.createElement('li');\n    li.innerHTML = 'Changed to ' + e.detail.width + ' x ' + e.detail.height;\n    this.$.chglist.appendChild(li);\n  }\n    ");this.$.sources.innerHTML+="<h3>Javascript</h3>\n    <pre><code class=\"javascript\">".concat(jsCode.value,"</code></pre>")}}],[{key:"template",get:function get(){return(0,_myApp.html)(_templateObject_b645eb00804e11e8814dc536b46d9113())}},{key:"properties",get:function get(){return{trigRefresh:{type:Number,value:0,observer:"trigChanged"},_isRunning:{type:Boolean,value:!1}}}}]);return MyView2}((0,_myApp.GestureEventListeners)(_myApp.PolymerElement));window.customElements.define("my-view2",MyView2)});